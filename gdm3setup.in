#! /usr/bin/%PYTHON%
# -*- coding: utf-8 -*-

import os
import gettext
import dbus
import subprocess
import datetime
import sys

from lxml import etree

from gi.repository import Gtk, Gdk, GdkPixbuf, GnomeDesktop, GObject, Gio, GLib

from GdmSetup import GdmSetupClient

gettext.install("gdm3setup")

#-----------------------------------------------
class ListPopover(GObject.Object):
    def __init__(self,relative_to):
		GObject.Object.__init__(self)
		self.popover = Gtk.Popover()
		self.popover.set_relative_to(relative_to)
		self.popover.set_position(Gtk.PositionType(3))

		frame = Gtk.Frame()
		frame.set_margin_top(4)
		frame.set_margin_bottom(4)
		frame.set_margin_start(4)
		frame.set_margin_end(4)
		self.popover.add(frame)

		self.scrolledwindow = Gtk.ScrolledWindow()
		self.scrolledwindow.set_policy(Gtk.PolicyType.NEVER,Gtk.PolicyType.AUTOMATIC)
		self.scrolledwindow.show()
		frame.add(self.scrolledwindow)

		self.listbox = Gtk.ListBox()
		self.listbox.set_selection_mode(Gtk.SelectionMode.NONE)
		self.listbox.set_header_func(self._update_header_func)
		self.scrolledwindow.add(self.listbox)
		self.listbox.connect("row-activated",self._row_activated)
		self.selectedrow  = None
		self._row_count = 0
		self._row_max = 3

    def _update_header_func(self, row, before):
        if before is None:
            return

        header = row.get_header()

        if (header is None):
            header = Gtk.HSeparator()
            header.show()
            row.set_header(header)

    def _row_activated(self,listbox,row):
        if row != self.selectedrow :
            if self.selectedrow != None :
                self.selectedrow.indicator.set_opacity(0.0);
            self.selectedrow = row
            row.indicator.set_opacity(1.0);
            self.emit("changed")
        self.popover.hide()

    def _row_select(self,row):
        if row != self.selectedrow :
            if self.selectedrow != None :
                self.selectedrow.indicator.set_opacity(0.0);
        self.selectedrow = row
        row.indicator.set_opacity(1.0);

    def run(self):
        self.popover.show_all()

        if self._row_count == 0:
            self.scrolledwindow.set_size_request(-1, -1)
        if self._row_count == 1:
            minimum_height, natural_height = self.listbox.get_children(
            )[0].get_preferred_height()
            self.scrolledwindow.set_size_request(
                -1, natural_height * self._row_count)
        if self._row_count > 1 and self._row_count <= self._row_max:
            minimum_height, natural_height = self.listbox.get_children(
            )[0].get_preferred_height()
            self.scrolledwindow.set_size_request(
                -1, natural_height * self._row_count + self._row_count - 1 )
        if self._row_count > self._row_max:
            minimum_height, natural_height = self.listbox.get_children(
            )[0].get_preferred_height()
            self.scrolledwindow.set_size_request(
                -1, natural_height * self._row_max + self._row_max)

    def add_row(self, text) :
        row = Gtk.ListBoxRow.new()
        self.listbox.add(row)
        box = Gtk.HBox()
        row.add(box)
        label = Gtk.Label.new(text)
        label.set_margin_top(8)
        label.set_margin_bottom(8)
        label.set_margin_start(32)
        label.set_margin_end(32)
        label.set_alignment(0, 0.5)
        box.pack_start(label,True,True,2)
        row.indicator = Gtk.Image.new_from_icon_name("emblem-ok-symbolic",Gtk.IconSize.BUTTON)
        row.indicator.set_margin_end(32)
        row.indicator.set_opacity(0.0);
        box.pack_end(row.indicator,False,False,2)
        row.row_name = text
        row.show_all()
        self._row_count = self._row_count + 1
        return row

    def get_value(self):
        if self.selectedrow != None :
            return self.selectedrow.row_name
        else :
            return ""

    def set_value(self,name):
        rows = self.listbox.get_children ()
        for row in rows :
            if name == row.row_name :
                self._row_select(row)
                break

GObject.signal_new("changed", ListPopover, GObject.SignalFlags.RUN_FIRST,GObject.TYPE_NONE, ())

class ImageChooserDialog(GObject.Object):
	def __init__(self):
		GObject.Object.__init__(self)
		self._status = _('(None)')
		self._warning = False
		self._parent = None
		self.filterImage = Gtk.FileFilter()
		self.filterImage.add_pixbuf_formats()
		self.filterImage.set_name(_('Image'))
		self.PreviewBox = Gtk.VBox.new(False, 16)
		self.PreviewBox.set_size_request(200,-1)
		self.LabelInfo = Gtk.Label.new("No Image")
		self.PreviewBox.pack_start(self.LabelInfo, False, False, 0)
		self.PreviewImage = Gtk.Image()
		self.PreviewBox.pack_start(self.PreviewImage, False, False, 0)
		self.PreviewImage.show()
		self.Label_Size = Gtk.Label.new("0 x 0")
		self.PreviewBox.pack_start(self.Label_Size, False, False, 0)
		self.Label_Size.show()
		self.Filename = ""
		self.FileChooserDialog = None

	def run(self) :
		if self.FileChooserDialog == None :

			self.FileChooserDialog = Gtk.FileChooserDialog(title=_("Select a file"),action=Gtk.FileChooserAction.OPEN)
			self.FileChooserDialog.add_button(_("_Cancel"),Gtk.ResponseType.CANCEL)
			self.FileChooserDialog.add_button(_("_Remove"),Gtk.ResponseType.NONE)
			self.FileChooserDialog.add_button(_("_Open"),Gtk.ResponseType.ACCEPT)
			self.FileChooserDialog.set_default_response(Gtk.ResponseType.ACCEPT)
			self.FileChooserDialog.add_filter(self.filterImage)
			self.FileChooserDialog.set_filename(self.Filename)
			self.FileChooserDialog.set_preview_widget(self.PreviewBox)
			self.FileChooserDialog.set_preview_widget_active(False)
			self.FileChooserDialog.set_modal(True)
			self.PreviewBox.show_all()
			self.FileChooserDialog.connect("update-preview",self._UpdatePreview)
			self.FileChooserDialog.connect("response",self.response_cb)
			self.FileChooserDialog.connect("destroy",self.dialog_destroy)
			self.FileChooserDialog.set_transient_for(self._parent)
		self.FileChooserDialog.present()

	def response_cb(self,dialog,response) :
		self.FileChooserDialog.hide()
		if response==Gtk.ResponseType.ACCEPT :
			self.set_filename(self.FileChooserDialog.get_filename())
			self.emit("file-changed")
		elif response==Gtk.ResponseType.NONE :
			self.set_filename("")
			self.emit("file-changed")

	def dialog_destroy(self,data) :
		self.FileChooserDialog = None

	def get_filename(self):
		return self.Filename

	def set_filename(self,filename=""):
		self.Filename = filename
		if filename[0:len("/home")] == "/home" :
			self._warning = True
		else:
			self._warning = False
		if filename != "" :
			self._status = os.path.basename(filename)
		else :
			self._status = _('(None)')

	def get_status_text(self):
		return self._status

	def get_warning(self):
		return self._warning

	def _UpdatePreview(self,e) :
		PreviewURI = self.FileChooserDialog.get_preview_uri()
		PreviewFile = self.FileChooserDialog.get_preview_file()
		if PreviewURI!=None and PreviewFile !=None :
			if not GLib.file_test(PreviewFile.get_path(),GLib.FileTest.IS_DIR) :
				PreviewFileInfo = PreviewFile.query_info("*",Gio.FileQueryInfoFlags.NONE,None)
				mimetype = PreviewFileInfo.get_content_type();
				name = PreviewFile.get_basename()
				mtime = PreviewFileInfo.get_modification_time().tv_sec
				ThumbnailFactory = GnomeDesktop.DesktopThumbnailFactory.new(GnomeDesktop.DesktopThumbnailSize.NORMAL)
				ThumbnailPath = ThumbnailFactory.lookup(PreviewURI,mtime)
				if ThumbnailPath != None :
					pixbuf = GdkPixbuf.Pixbuf.new_from_file(ThumbnailPath)
				else :
					pixbuf = ThumbnailFactory.generate_thumbnail(PreviewURI,mimetype)
					ThumbnailFactory.save_thumbnail(pixbuf,PreviewURI,mtime)
				self.PreviewImage.set_from_pixbuf(pixbuf)
				PreviewWidth = pixbuf.get_option("tEXt::Thumb::Image::Width")
				PreviewHeight = pixbuf.get_option("tEXt::Thumb::Image::Height")
				self.Label_Size.set_label( PreviewWidth + " x " + PreviewHeight)
				self.FileChooserDialog.set_preview_widget_active(True)
				self.LabelInfo.hide()
				self.PreviewImage.show()
				self.Label_Size.show()

			else :
				self.FileChooserDialog.set_preview_widget_active(False)
		else :
			self.FileChooserDialog.set_preview_widget_active(False)

	def set_transient_for(self,parent):
		self._parent = parent

GObject.signal_new("file-changed", ImageChooserDialog, GObject.SignalFlags.RUN_FIRST,GObject.TYPE_NONE, ())

class AutologinDialog (GObject.Object) :
	def __init__(self):
		GObject.Object.__init__(self)
		self.autologin=False
		self.timed=False
		self.time=30
		self._status = _("Disabled")
		self.mode=0

		self._row_count = 0

		AccountsProxy = dbus.SystemBus().get_object('org.freedesktop.Accounts','/org/freedesktop/Accounts')
		self.GetListUsers = AccountsProxy.get_dbus_method('ListCachedUsers','org.freedesktop.Accounts')

		self.Builder = Gtk.Builder()
		self.Builder.set_translation_domain("gdm3setup")
		self.Builder.add_from_file("/usr/share/gdm3setup/ui/gdm3setup.ui")
		self.Dialog = self.Builder.get_object("autologin-dialog")
		self.Dialog.set_default_response(Gtk.ResponseType.OK)
		self.scrolledwindow = self.Builder.get_object("scrolledwindow1")
		self.selectedrow  = None

		self.listbox = self.Builder.get_object("autologin-listbox")
		self.listbox.connect("row-activated",self._row_activated)
		self.listbox.selectedrow = None

		self.SpinButton_Delay = self.Builder.get_object("time-spinbutton")

		self.ComboBox_Mode = self.Builder.get_object("mode-combobox")
		self.ComboBox_Mode.connect("changed",self.combobox_mode_changed)

		self.Box_Username = self.Builder.get_object("autologin-dialog-username-box")
		self.Box_Delay = self.Builder.get_object("autologin-dialog-delay-box")
		self.Box_Autologin = self.Builder.get_object("autologin-dialog-box")

		for user_path in self.GetListUsers()  :
			user_proxy = dbus.SystemBus().get_object('org.freedesktop.Accounts',user_path)

			GetProp = user_proxy.get_dbus_method('Get','org.freedesktop.DBus.Properties')
			RealName = GetProp('org.freedesktop.Accounts.User','RealName')
			UserName = GetProp('org.freedesktop.Accounts.User','UserName')
			LocalAccount = GetProp('org.freedesktop.Accounts.User','LocalAccount')

			if LocalAccount :
				self.add_row(UserName,RealName)

		self.Dialog.connect("response",self.response_cb)
		self.Dialog.connect("delete-event",self._delete_event)

	def update(self) :
		if self.autologin :
			self.Box_Autologin.show()
			if self.timed :
				self.mode = 2
				self._status = self.get_realname() + ' ' + unicode(_('after'),'UTF_8') + ' ' + str(self.time) + ' ' + unicode(_('second(s)'),'UTF_8')
				self.Box_Delay.show()
				self.Box_Autologin.set_spacing(16)
			else :
				self.mode = 1
				self._status = self.get_realname()
				self.Box_Delay.hide()
				self.Box_Autologin.set_spacing(0)
		else :
			self.mode = 0
			self._status = _("Disabled")
			self.Box_Autologin.hide()

	def set_mode(self,mode) :
		if mode == 2 :
			self.autologin = True
			self.timed = True
		elif mode == 1 :
			self.autologin = True
			self.timed = False
		else :
			self.autologin = False
			self.timed = False
		self.update()

	def set_autologin(self,b) :
		self.autologin = b
		self.update()

	def get_autologin(self) :
		return self.autologin

	def set_timed(self,timed):
		self.timed=timed
		self.update()

	def get_timed(self):
		return self.timed

	def set_time(self,time):
		self.time=time
		self.update()

	def get_time(self):
		return self.time

	def get_username(self):
		if self.selectedrow != None :
			return self.selectedrow.row_username
		else :
			return ""

	def get_realname(self):
		if self.selectedrow != None :
			return self.selectedrow.row_realname
		else :
			return ""

	def set_username(self,username):
		rows = self.listbox.get_children ()

		for row in rows :
			if username == row.row_username :
				self._row_select(row)
				break

	def get_status_text(self):
		return self._status

	def _row_activated(self,listbox,row):

		if row != listbox.selectedrow :
			if listbox.selectedrow != None :
				listbox.selectedrow.indicator.set_opacity(0.0);
			listbox.selectedrow = row
			row.indicator.set_opacity(1.0);

	def _list_row_select(self,row):
		if row != self.listbox.selectedrow :
			if self.listbox.selectedrow != None :
				self.listbox.selectedrow.indicator.set_opacity(0.0);
			self.listbox.selectedrow = row
			row.indicator.set_opacity(1.0);

	def _row_select(self,row):
		self.selectedrow = row
		self._list_row_select(self.selectedrow)

	def add_row(self,UserName,RealName):
		row = Gtk.ListBoxRow.new()
		self.listbox.add(row)
		box = Gtk.HBox()
		box.set_margin_left(32)
		row.add(box)
		label = Gtk.Label.new(UserName)
		label.set_margin_top(6)
		label.set_margin_bottom(6)
		indicator = Gtk.Image.new_from_icon_name("emblem-ok-symbolic",Gtk.IconSize.BUTTON)
		indicator.set_margin_left(16)
		indicator.set_margin_right(16)
		indicator.set_opacity(0.0);
		box.pack_start(label,True,True,2)
		box.pack_end(indicator,False,False,2)
		row.row_username = UserName
		row.row_realname = RealName
		row.indicator = indicator
		row.show_all()
		self._row_count = self._row_count + 1
		return row

	def run(self) :
		self.Dialog.present()
		self.SpinButton_Delay.set_value(self.get_time())
		self.ComboBox_Mode.set_active(self.mode)
		if self._row_count >= 3 :
			if self.selectedrow != None :
				row_height = self.selectedrow.get_allocation().height
			else :
				row_height = self.listbox.get_children()[0].get_allocation().height
			self.scrolledwindow.set_size_request(-1,row_height*3)

	def response_cb(self,dialog,response) :
		if response == Gtk.ResponseType.OK :

			if self.mode != self.ComboBox_Mode.get_active() or \
			self.listbox.selectedrow != self.selectedrow or \
			self.time != self.SpinButton_Delay.get_value_as_int() :
				self.set_mode(self.ComboBox_Mode.get_active())
				self.selectedrow = self.listbox.selectedrow
				self.set_time(self.SpinButton_Delay.get_value_as_int())
				self.emit("changed")

			self.Dialog.hide()
		else :
			self.Dialog.hide()

	def combobox_mode_changed(self,combobox):

		if self._row_count > 0 :
			minimum_height,natural_height = self.listbox.get_children()[0].get_preferred_height()
			self.scrolledwindow.set_size_request(-1,natural_height*3)

		mode = combobox.get_active()
		if mode == 2 :
			self.Box_Autologin.show()
			self.Box_Username.set_hexpand(False)
			self.Box_Autologin.set_spacing(8)
			self.Box_Delay.show()

		elif mode == 1 :
			self.Box_Autologin.show()
			self.Box_Username.set_hexpand(True)
			self.Box_Delay.hide()
			self.Box_Autologin.set_spacing(0)

		else :
			self.Box_Autologin.hide()

	def _delete_event(self, widget, event):
		self._list_row_select(self.selectedrow)
		return widget.hide_on_delete()

	def set_transient_for(self,parent):
		self.Dialog.set_transient_for(parent)

GObject.signal_new("changed", AutologinDialog, GObject.SignalFlags.RUN_FIRST,GObject.TYPE_NONE, ())

class BannerDialog(GObject.Object) :
	def __init__(self):
		GObject.Object.__init__(self)
		self._State=False
		self._Text=""
		self._Status=_("Disabled")
		self._parent=None

	def get_text(self):
		return self._Text

	def set_text(self,text):
		self._Text = text
		if self._State == True :
			self._Status = text

	def get_state(self):
		return self._State

	def set_state(self,state):
		self._State = state
		if state == True :
			self._Status = self._Text
		else :
			self._Status = _("Disabled")

	def get_status_text(self):
		return self._Status

	def run(self) :
		self._Builder = Gtk.Builder()
		self._Builder.set_translation_domain("gdm3setup")
		self._Builder.add_from_file("/usr/share/gdm3setup/ui/gdm3setup.ui")
		self._Dialog = self._Builder.get_object("banner-dialog")
		self._Dialog.set_default_response(Gtk.ResponseType.OK)
		self._Dialog.set_transient_for(self._parent)
		self._Switch_State = self._Builder.get_object("state-switch")
		self._Entry_Text = self._Builder.get_object("banner-entry")

		self._Switch_State.bind_property("active",self._Entry_Text,"sensitive")

		if self._State == True :
			self._Switch_State.set_active(True)
		else :
			self._Entry_Text.set_sensitive(False)
		self._Entry_Text.set_text(self._Text)

		result = self._Dialog.run()

		if result == Gtk.ResponseType.OK :
			if self._State != self._Switch_State.get_active() or \
				self._Text != self._Entry_Text.get_text() :
				self.set_text(self._Entry_Text.get_text())
				self.set_state(self._Switch_State.get_active())
				self.emit("changed")
		self._Dialog.destroy()

	def set_transient_for(self,parent):
		self._parent = parent

GObject.signal_new("changed", BannerDialog, GObject.SignalFlags.RUN_FIRST,GObject.TYPE_NONE, ())

class MainWindow(Gtk.ApplicationWindow) :
	def __init__(self,app) :
		Gtk.ApplicationWindow.__init__(self,application=app,title=_("Login screen settings"))
		self.connect("destroy",self._close)
		self.set_position(Gtk.WindowPosition.CENTER)
		self.set_resizable(False)
		self.set_size_request(640,480)

		self.titlebar = Gtk.HeaderBar()
		self.titlebar.set_title(_("Login screen settings"))
		self.titlebar.set_show_close_button(True)
		self.set_titlebar(self.titlebar)
		self.titlebar.show_all()

		self.Builder = Gtk.Builder()
		self.Builder.set_translation_domain("gdm3setup")
		self.Builder.add_from_file("/usr/share/gdm3setup/ui/gdm3setup.ui")
		self.Box_Main = self.Builder.get_object("vbox_gdm")
		self.add(self.Box_Main)

		self.Button_shell_logo10 = ImageChooserDialog()
		self.Button_shell_logo10.set_transient_for(self)
		self.Button_banner_text6 = BannerDialog()
		self.Button_banner_text6.set_transient_for(self)
		self.Switch_user8 = self.Builder.get_object("userlist-switch")
		self.Button_autologin = AutologinDialog()
		self.Button_autologin.set_transient_for(self)
		self.Action_allowed_failures = Gio.SimpleAction.new_stateful('allowed-failures', GLib.Variant('i', 0).get_type(), GLib.Variant('i', 0))
		self.Switch_restart = self.Builder.get_object("restart-switch")
		self.Switch_clock_date10 = self.Builder.get_object("date-switch")
		self.Switch_clock_seconds10 = self.Builder.get_object("seconds-switch")
		self.Action_fingerprint_authentication = Gio.SimpleAction.new_stateful('authentication-fingerprint', None, GLib.Variant('b', False))
		self.Action_password_authentication = Gio.SimpleAction.new_stateful('authentication-password', None, GLib.Variant('b', False))
		self.Action_smartcard_authentication = Gio.SimpleAction.new_stateful('authentication-smartcard', None, GLib.Variant('b', False))
		self.Switch_wayland = self.Builder.get_object("wayland-switch")

		self.listbox = self.Builder.get_object("listbox1")

		self.authentication_status = self.Builder.get_object("authentication-status")
		self.autologin_status = self.Builder.get_object("autologin-status")
		self.banner_status = self.Builder.get_object("banner-status")
		self.logo_status = self.Builder.get_object("logo-status")
		self.logo_warning = self.Builder.get_object("logo-warning")
		self.shell_status = self.Builder.get_object("shell-status")
		self.icon_status = self.Builder.get_object("icon-status")
		self.cursor_status = self.Builder.get_object("cursor-status")
		self.allowed_failures_status = self.Builder.get_object("allowed-failures-status")

		self.ComboBox_shell10 = ListPopover(self.shell_status)
		self.ComboBox_icon = ListPopover(self.icon_status)
		self.ComboBox_cursor =	ListPopover(self.cursor_status)

		self.allowed_failures_menu = self.Builder.get_object("allowed-failures-menu")
		self.authentication_menu = self.Builder.get_object("authentication-menu")
		self.Popover_allowed_failure = Gtk.Popover.new_from_model(self.allowed_failures_status,self.allowed_failures_menu)
		self.Popover_authentication = Gtk.Popover.new_from_model(self.authentication_status,self.authentication_menu)

		self.load_shell_list()
		self.load_icon_list()
		self.get_gdm()
		self.get_autologin()

		self.ComboBox_shell10.connect("changed",self.shell_theme_10_changed)
		self.ComboBox_icon.connect("changed",self.icon_theme_changed)
		self.ComboBox_cursor.connect("changed",self.cursor_theme_changed)
		self.Button_shell_logo10.connect("file-changed",self.shell_logo_10_filechanged)
		self.Button_banner_text6.connect("changed",self.banner_text_6_changed)
		self.Switch_user8.connect("state-set",self.user_list_8_toggled)
		self.Switch_restart.connect("state-set",self.restart_toggled)
		self.Button_autologin.connect("changed",self.autologin_changed)
		self.Switch_clock_date10.connect("state-set",self.clock_date_10_toggled)
		self.Switch_clock_seconds10.connect("state-set",self.clock_seconds_10_toggled)
		self.Action_allowed_failures.connect('activate', self.allowed_failures_10_changed)
		self.Action_fingerprint_authentication.connect('activate', self.fingerprint_authentication_changed)
		self.Action_password_authentication.connect('activate', self.password_authentication_changed)
		self.Action_smartcard_authentication.connect('activate', self.smartcard_authentication_changed)
		self.Switch_wayland.connect("state-set",self.wayland_toggled)
		self.listbox.connect("row-activated",self.row_activated)

		app.add_action(self.Action_allowed_failures)
		app.add_action(self.Action_fingerprint_authentication)
		app.add_action(self.Action_password_authentication)
		app.add_action(self.Action_smartcard_authentication)

	def load_shell_list(self):

		lst_shell_themes = os.listdir('/usr/share/themes')
		self.ComboBox_shell10.add_row("Adwaita")

		for i in range(len(lst_shell_themes)):
			if os.path.isdir('/usr/share/themes/'+lst_shell_themes[i]+'/gnome-shell') :
				self.ComboBox_shell10.add_row(lst_shell_themes[i])

	def load_icon_list(self):
		lst_icons = os.listdir('/usr/share/icons')

		for i in range(len(lst_icons)):
			if os.path.isdir('/usr/share/icons/'+lst_icons[i]+'/') :
				if 	os.path.isdir('/usr/share/icons/'+lst_icons[i]+'/cursors/') :
					self.ComboBox_cursor.add_row(lst_icons[i])
				else :
					self.ComboBox_icon.add_row(lst_icons[i])

	def _close(self,e):
		try :
			GdmSetupClient.StopDaemon()
		except dbus.exceptions.DBusException :
			pass

	def get_gdm(self):
		self.SHELL_THEME = GdmSetupClient.GetShellTheme()
		self.ICON_THEME = GdmSetupClient.GetIconTheme()
		self.CURSOR_THEME = GdmSetupClient.GetCursorTheme()
		self.SHELL_LOGO = GdmSetupClient.GetShellLogo()
		self.USER_LIST = GdmSetupClient.GetUserListVisibility()
		self.RESTART = GdmSetupClient.GetRestartMenuVisibility()
		self.BANNER = GdmSetupClient.GetBannerVisibility()
		self.BANNER_TEXT = GdmSetupClient.GetBannerText()
		self.CLOCK_DATE = GdmSetupClient.GetClockDateVisibility()
		self.CLOCK_SECONDS = GdmSetupClient.GetClockSecondsVisibility()
		self.ALLOWED_FAILURES = GdmSetupClient.GetAllowedFailures()
		self.FINGERPRINT_AUTHENTICATION = GdmSetupClient.GetFingerprintAuthentication()
		self.PASSWORD_AUTHENTICATION = GdmSetupClient.GetPasswordAuthentication()
		self.SMARTCARD_AUTHENTICATION = GdmSetupClient.GetSmartcardAuthentication()
		self.WAYLAND = GdmSetupClient.GetWaylandEnable()
		self.ComboBox_shell10.set_value(self.SHELL_THEME)
		self.ComboBox_icon.set_value(self.ICON_THEME)
		self.ComboBox_cursor.set_value(self.CURSOR_THEME)
		self.Button_shell_logo10.set_filename(self.SHELL_LOGO)
		self.Button_banner_text6.set_text(self.BANNER_TEXT)
		self.Button_banner_text6.set_state(self.BANNER)
		self.Switch_user8.set_active(self.USER_LIST)
		self.Switch_restart.set_active(self.RESTART)
		self.Switch_clock_date10.set_active(self.CLOCK_DATE)
		self.Switch_clock_seconds10.set_active(self.CLOCK_SECONDS)
		self.Action_allowed_failures.set_state(GLib.Variant('i',self.ALLOWED_FAILURES))
		self.Action_fingerprint_authentication.set_state(GLib.Variant('b',self.FINGERPRINT_AUTHENTICATION))
		self.Action_password_authentication.set_state(GLib.Variant('b',self.PASSWORD_AUTHENTICATION))
		self.Action_smartcard_authentication.set_state(GLib.Variant('b',self.SMARTCARD_AUTHENTICATION))
		self.banner_status.set_text(self.Button_banner_text6.get_status_text())
		self.update_authentication_status()
		self.logo_status.set_text(self.Button_shell_logo10.get_status_text())
		self.logo_warning.set_visible(self.Button_shell_logo10.get_warning())
		self.shell_status.set_text(self.ComboBox_shell10.get_value())
		self.icon_status.set_text(self.ComboBox_icon.get_value())
		self.cursor_status.set_text(self.ComboBox_cursor.get_value())
		self.allowed_failures_status.set_text(str(self.ALLOWED_FAILURES))
		self.Switch_wayland.set_active(self.WAYLAND)

	def set_autologin(self,autologin,username,timed,time):
		if self.SetAutoLogin(autologin,username,timed,time)=="OK" :
			return True
		else :
			return False

	def get_autologin(self):
		self.AUTOLOGIN_ENABLED = GdmSetupClient.GetAutoLoginState()
		self.AUTOLOGIN_USERNAME = GdmSetupClient.GetAutoLoginUserName()
		self.AUTOLOGIN_TIMED = GdmSetupClient.GetAutoLoginTimed()
		self.AUTOLOGIN_TIME = GdmSetupClient.GetAutoLoginTime()
		self.Button_autologin.set_autologin(self.AUTOLOGIN_ENABLED)
		self.Button_autologin.set_username(self.AUTOLOGIN_USERNAME)
		self.Button_autologin.set_timed(self.AUTOLOGIN_TIMED)
		self.Button_autologin.set_time(self.AUTOLOGIN_TIME)

		self.autologin_status.set_text(self.Button_autologin.get_status_text())

	def update_authentication_status(self):
		m = 1 * self.FINGERPRINT_AUTHENTICATION + 2 * self.PASSWORD_AUTHENTICATION + 4 * self.SMARTCARD_AUTHENTICATION
		if   m == 0 :
			self.authentication_status.set_text(_("None"))
		elif m == 1 :
			self.authentication_status.set_text(_("Fingerprint"))
			self.Action_fingerprint_authentication.set_enabled(False)
		elif m == 2 :
			self.authentication_status.set_text(_("Password"))
			self.Action_password_authentication.set_enabled(False)
		elif m == 3 :
			self.authentication_status.set_text(_("Fingerprint") + " | " + _("Password"))
		elif m == 4 :
			self.authentication_status.set_text(_("Smartcard"))
			self.Action_smartcard_authentication.set_enabled(False)
		elif m == 5 :
			self.authentication_status.set_text(_("Fingerprint") + " | " + _("Smartcard"))
		elif m == 6 :
			self.authentication_status.set_text(_("Password") + " | " + _("Smartcard"))
		else :
			self.authentication_status.set_text(_("All"))

		if m > 1 :
			self.Action_fingerprint_authentication.set_enabled(True)
		if m > 2 :
			self.Action_password_authentication.set_enabled(True)
		if m > 4 :
			self.Action_smartcard_authentication.set_enabled(True)

	def shell_theme_10_changed(self,e):
		shell_theme = unicode(self.ComboBox_shell10.get_value(),'UTF_8')
		if shell_theme!=self.SHELL_THEME :
			if GdmSetupClient.SetShellTheme(shell_theme) :
				self.SHELL_THEME = shell_theme
				self.shell_status.set_text(e.get_value())
				print("SHELL Theme Changed : " + self.SHELL_THEME)
			else :
				self.ComboBox_shell10.set_value(self.SHELL_THEME)

	def icon_theme_changed(self,e):
		icon_theme = unicode(self.ComboBox_icon.get_value(),'UTF_8')
		if self.ICON_THEME != icon_theme:
			if GdmSetupClient.SetIconTheme(icon_theme) :
				self.ICON_THEME = icon_theme
				self.icon_status.set_text(e.get_value())
				print ("Icon Theme Changed : " + self.ICON_THEME)
			else :
				self.ComboBox_icon.set_value(self.ICON_THEME)

	def cursor_theme_changed(self,e):
		cursor_theme = unicode(self.ComboBox_cursor.get_value(),'UTF_8')
		if self.CURSOR_THEME != cursor_theme:
			if GdmSetupClient.SetCursorTheme(cursor_theme) :
				self.CURSOR_THEME = cursor_theme
				self.cursor_status.set_text(e.get_value())
				print ("Cursor Theme Changed : " + self.CURSOR_THEME)
			else :
				self.ComboBox_cursor.set_value(self.CURSOR_THEME)

	def shell_logo_10_filechanged(self,e):
		shell_logo = unicode(self.Button_shell_logo10.get_filename(),'UTF_8')
		if self.SHELL_LOGO != shell_logo :
			if GdmSetupClient.SetShellLogo(shell_logo) :
				self.SHELL_LOGO = shell_logo
				self.logo_status.set_text(e.get_status_text())
				self.logo_warning.set_visible(self.Button_shell_logo10.get_warning())
				print ("Shell Logo Changed : " + self.SHELL_LOGO)
			else:
				self.Button_shell_logo10.set_filename(self.SHELL_LOGO)
				self.logo_warning.set_visible(self.Button_shell_logo10.get_warning())

	def banner_text_6_changed(self,e):
		banner_text = unicode(self.Button_banner_text6.get_text(),'UTF_8')
		banner = self.Button_banner_text6.get_state()
		if banner_text!=self.BANNER_TEXT or banner!=self.BANNER :
			if GdmSetupClient.SetBannerText(banner_text) :
				GdmSetupClient.SetBannerVisibility(banner)
				self.BANNER_TEXT = banner_text
				self.BANNER = banner
				self.banner_status.set_text(e.get_status_text())
				print ("Banner Changed - Text : " + self.BANNER_TEXT) + " - State : " + str(self.BANNER)
			else :
				self.Button_banner_text6.set_text(self.BANNER_TEXT)
				self.Button_banner_text6.set_state(self.BANNER)

	def fingerprint_authentication_changed(self,action,e):
		fingerprint_authentication = not action.get_state()
		if fingerprint_authentication!=self.FINGERPRINT_AUTHENTICATION :
			if GdmSetupClient.SetFingerprintAuthentication(fingerprint_authentication) :
				self.FINGERPRINT_AUTHENTICATION=fingerprint_authentication
				self.update_authentication_status()
				print ("Authentication by fingerprint Changed : " + str(self.FINGERPRINT_AUTHENTICATION ))
			action.change_state(GLib.Variant('b',self.FINGERPRINT_AUTHENTICATION))
		self.Popover_authentication.hide()

	def password_authentication_changed(self,action,e):
		password_authentication = not action.get_state()
		if password_authentication!=self.PASSWORD_AUTHENTICATION :
			if GdmSetupClient.SetPasswordAuthentication(password_authentication) :
				self.PASSWORD_AUTHENTICATION=password_authentication
				self.update_authentication_status()
				print ("Authentication by password Changed : " + str(self.PASSWORD_AUTHENTICATION))
			action.set_state(GLib.Variant('b',self.PASSWORD_AUTHENTICATION))
		self.Popover_authentication.hide()

	def smartcard_authentication_changed(self,action,e):
		smartcard_authentication = not action.get_state()
		if smartcard_authentication!=self.SMARTCARD_AUTHENTICATION :
			if GdmSetupClient.SetSmartcardAuthentication(smartcard_authentication) :
				self.SMARTCARD_AUTHENTICATION=smartcard_authentication
				self.update_authentication_status()
				print ("Authentication by smartcard Changed : " + str(self.SMARTCARD_AUTHENTICATION))
			action.set_state(GLib.Variant('b',self.SMARTCARD_AUTHENTICATION))
		self.Popover_authentication.hide()

	def user_list_8_toggled(self,e,state):
		user_list = self.Switch_user8.get_active()
		if self.USER_LIST != user_list :
			if GdmSetupClient.SetUserListVisibility(user_list) :
				self.USER_LIST = user_list
				print ("User List Changed : " + str(self.USER_LIST))
			else:
				self.Switch_user8.set_active(self.USER_LIST)
				return True

	def restart_toggled(self,e,state):
		restart = self.Switch_restart.get_active()
		if self.RESTART != restart :
			if GdmSetupClient.SetRestartMenuVisibility(restart) :
				self.RESTART = restart
				print ("Restart Button Changed : " + str(self.RESTART))
			else:
				self.Switch_restart.set_active(self.RESTART)
				return True

	def autologin_changed(self,e) :
		autologin_enabled = self.Button_autologin.get_autologin()
		autologin_username = self.Button_autologin.get_username()
		autologin_timed = self.Button_autologin.get_timed()
		autologin_time = self.Button_autologin.get_time()
		if GdmSetupClient.SetAutoLoginTime(autologin_time):
			GdmSetupClient.SetAutoLoginTimed(autologin_timed)
			GdmSetupClient.SetAutoLoginUserName(autologin_username)
			GdmSetupClient.SetAutoLoginState(autologin_enabled)
			print("Autologin Changed : " + autologin_username)
			self.AUTOLOGIN_ENABLED = autologin_enabled
			self.AUTOLOGIN_USERNAME = autologin_username
			self.AUTOLOGIN_TIMED = autologin_timed
			self.AUTOLOGIN_TIME = autologin_time
			self.autologin_status.set_text(e.get_status_text())
		else :
			self.Button_autologin.set_autologin(self.AUTOLOGIN_ENABLED)
			self.Button_autologin.set_username(self.AUTOLOGIN_USERNAME)
			self.Button_autologin.set_timed(self.AUTOLOGIN_TIMED)
			self.Button_autologin.set_time(self.AUTOLOGIN_TIME)

	def clock_date_10_toggled(self,e,state) :
		clock_date = self.Switch_clock_date10.get_active()
		if self.CLOCK_DATE != clock_date :
			if GdmSetupClient.SetClockDateVisibility(clock_date) :
				self.CLOCK_DATE = clock_date
				print ("Clock Date toggled : " + str(self.CLOCK_DATE))
			else:
				self.Switch_clock_date10.set_active(self.CLOCK_DATE)
				return True

	def clock_seconds_10_toggled(self,e,state) :
		clock_seconds = self.Switch_clock_seconds10.get_active()
		if self.CLOCK_SECONDS != clock_seconds :
			if GdmSetupClient.SetClockSecondsVisibility(clock_seconds) :
				self.CLOCK_SECONDS = clock_seconds
				print ("Clock Seconds toggled : " + str(self.CLOCK_SECONDS))
			else:
				self.Switch_clock_seconds10.set_active(self.CLOCK_SECONDS)
				return True

	def allowed_failures_10_changed(self,action, value) :
		allowed_failures = value.get_int32()
		if self.ALLOWED_FAILURES != allowed_failures :
			if GdmSetupClient.SetAllowedFailures(allowed_failures) :
				self.ALLOWED_FAILURES = allowed_failures
				self.allowed_failures_status.set_text(str(self.ALLOWED_FAILURES))
				print ("Allowed Failures Changed : " + str(self.ALLOWED_FAILURES))
			action.set_state(GLib.Variant('i',self.ALLOWED_FAILURES))
		self.Popover_allowed_failure.hide()

	def wayland_toggled(self,e,state):
		wayland = self.Switch_wayland.get_active()
		if self.WAYLAND != wayland :
			if GdmSetupClient.SetWaylandEnable(wayland) :
				self.WAYLAND = wayland
				print ("Wayland Enable Changed : " + str(self.WAYLAND))
			else:
				self.Switch_wayland.set_active(self.WAYLAND)
				return True

	def row_activated(self,listbox,row):
		row_name = Gtk.Buildable.get_name(row)

		if row_name == "shell-row":
			self.ComboBox_shell10.run()
		elif row_name == "icon-row":
			self.ComboBox_icon.run()
		elif row_name == "cursor-row":
			self.ComboBox_cursor.run()
		elif row_name == "logo-row":
			self.Button_shell_logo10.run()
		elif row_name == "banner-row":
			self.Button_banner_text6.run()
		elif row_name == "autologin-row":
			self.Button_autologin.run()
		elif row_name == "authentication-row":
			self.Popover_authentication.show()
		elif row_name == "allowed-failure-row":
			self.Popover_allowed_failure.show()
		elif row_name == "userlist-row":
			active = self.Switch_user8.get_active()
			self.Switch_user8.set_active( not active )
		elif row_name == "restart-row":
			active = self.Switch_restart.get_active()
			self.Switch_restart.set_active( not active )
		elif row_name == "date-row":
			active = self.Switch_clock_date10.get_active()
			self.Switch_clock_date10.set_active( not active )
		elif row_name == "seconds-row":
			active = self.Switch_clock_seconds10.get_active()
			self.Switch_clock_seconds10.set_active( not active )
		elif row_name == "wayland-row":
			active = self.Switch_wayland.get_active()
			self.Switch_wayland.set_active( not active )
#-----------------------------------------------

def get_setting(name,data):
	for line in data:
		line = unicode(line)
		if line[0:len(name)+1]==name+"=":
			value = line[len(name)+1:len(line)].strip()
			break
	return value

def str_to_bool(state) :
	if state.capitalize()=="True" :
		b_state = True
	else :
		b_state = False

	return b_state

def GetPixbufForPath(targetfile) :
	PreviewFile = Gio.File.new_for_path(targetfile)
	if PreviewFile.query_exists(None) :
		PreviewFileInfo = PreviewFile.query_info("*",Gio.FileQueryInfoFlags.NONE,None)
		mtime = PreviewFileInfo.get_modification_time().tv_sec;
		mimetype = PreviewFileInfo.get_content_type();
		ThumbnailFactory = GnomeDesktop.DesktopThumbnailFactory.new(GnomeDesktop.DesktopThumbnailSize.LARGE);
		ThumbnailPath = ThumbnailFactory.lookup(PreviewFile.get_uri(),mtime);
		if (ThumbnailPath != None) :
			pixbuf = GdkPixbuf.Pixbuf.new_from_file(ThumbnailPath)
		else :
			pixbuf = ThumbnailFactory.generate_thumbnail(PreviewFile.get_uri(),mimetype)
			ThumbnailFactory.save_thumbnail(pixbuf,PreviewFile.get_uri(),mtime)
	else :
		ThumbnailFactory = GnomeDesktop.DesktopThumbnailFactory.new(GnomeDesktop.DesktopThumbnailSize.LARGE);
		pixbuf = ThumbnailFactory.generate_thumbnail(PreviewFile.get_uri(),"")
	return pixbuf

class Application(Gtk.Application):
	def __init__(self):
		Gtk.Application.__init__(self,application_id='nanoarch.gdm3setup')
		GLib.set_application_name("GDM3setup")
		GLib.set_prgname('gdm3setup')

		self._window = None
	def do_activate(self):
		if not self._window:
			self._window = MainWindow(self)
			self._window.show()
		self._window.present()

	def do_startup(self):
		Gtk.Application.do_startup(self)
		self.build_app_menu()
		self.set_app_menu(self.app_menu)

	def build_app_menu(self):
		builder = Gtk.Builder ();
		builder.set_translation_domain('gdm3setup')
		builder.add_from_file ("/usr/share/gdm3setup/ui/app-menu.ui");
		self.app_menu = builder.get_object("app-menu")

		aboutAction = Gio.SimpleAction.new('about', None)
		aboutAction.connect('activate', self.about)
		self.add_action(aboutAction)

		quitAction = Gio.SimpleAction.new('quit', None)
		quitAction.connect('activate', self.quit)
		self.add_action(quitAction)

	def quit(self,action=None, param=None):
		self._window.destroy()

	def about(self,action=None, param=None):
		aboutdialog = Gtk.AboutDialog()
		aboutdialog.set_title(_("About"))
		aboutdialog.set_program_name("GDM3setup")
		aboutdialog.set_comments(_("An interface to configure the login screen"))
		aboutdialog.set_copyright("Copyright \xc2\xa9 2011-2014 NanoArch")
		aboutdialog.set_license_type(Gtk.License.GPL_2_0)
		aboutdialog.set_logo_icon_name("preferences-desktop-theme")
		aboutdialog.set_website("https://github.com/Nano77/gdm3setup/")

		AUTHORS = [
				"NanoArch <nanoarch77@gmail.com>"
				]
		aboutdialog.set_authors(AUTHORS)
		aboutdialog.set_translator_credits(_("translator-credits"))
		aboutdialog.connect("response", lambda w, r: aboutdialog.destroy())
		aboutdialog.show()

if __name__ == "__main__":
	gettext.install("gdm3setup")
	app = Application()
	exit_status = app.run(None)
	sys.exit(exit_status)

