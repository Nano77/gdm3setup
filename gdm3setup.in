#! /usr/bin/%PYTHON%
# -*- coding: utf-8 -*-

import os
import gettext
import dbus
import subprocess
import datetime
import sys

from lxml import etree

from gi.repository import Gtk, Gdk, GdkPixbuf, GnomeDesktop, GObject, Gio, GLib

from GdmSetup import GdmSetupClient

gettext.install("gdm3setup")

#-----------------------------------------------
class ImageChooserButton(Gtk.Button):
	__gtype_name__ = 'ImageChooserButton'

	def __init__(self):
		Gtk.Button.__init__(self)
		self.Label = Gtk.Label(_('(None)'))
		self.ImageBadPath = Gtk.Image()
		self.ImageBadPath.set_from_icon_name("dialog-warning",Gtk.IconSize.SMALL_TOOLBAR)
		self.ImageBadPath.set_no_show_all(True)
		self.ImageBadPath.set_tooltip_text(_("Bad path :\nFile must be in /usr/share or /usr/local/share"))
		self.ImageFileOpen = Gtk.Image()
		self.ImageFileOpen.set_from_icon_name("fileopen",Gtk.IconSize.SMALL_TOOLBAR)
		self.Separator = Gtk.Separator.new(Gtk.Orientation.VERTICAL)
		self.Box = Gtk.HBox.new(False,0)
		self.add(self.Box)
		self.Box.pack_start(self.ImageBadPath,False,False,2)
		self.Box.pack_start(self.Label,False,False,2)
		self.Box.pack_end(self.ImageFileOpen,False,False,2)
		self.Box.pack_end(self.Separator,False,False,2)
		self.Box.show_all()
		self.filterImage = Gtk.FileFilter()
		self.filterImage.add_pixbuf_formats()
		self.filterImage.set_name(_('Image'))
		self.PreviewBox = Gtk.VBox.new(False, 16)
		self.PreviewBox.set_size_request(200,-1)
		self.LabelInfo = Gtk.Label("No Image")
		self.PreviewBox.pack_start(self.LabelInfo, False, False, 0)
		self.PreviewImage = Gtk.Image()
		self.PreviewBox.pack_start(self.PreviewImage, False, False, 0)
		self.PreviewImage.show()
		self.Label_Size = Gtk.Label("0 x 0")
		self.PreviewBox.pack_start(self.Label_Size, False, False, 0)
		self.Label_Size.show()
		self.Filename = ""
		self.connect("clicked",self._Clicked)
		self.FileChooserDialog = None

	def _Clicked(self,e) :
		if self.FileChooserDialog == None :

			self.FileChooserDialog = Gtk.FileChooserDialog(title=_("Select a File"),action=Gtk.FileChooserAction.OPEN,buttons=(Gtk.STOCK_CANCEL,Gtk.ResponseType.CANCEL,Gtk.STOCK_CLEAR,Gtk.ResponseType.NONE,Gtk.STOCK_OPEN,Gtk.ResponseType.ACCEPT))
			self.FileChooserDialog.add_filter(self.filterImage)
			self.FileChooserDialog.set_filename(self.Filename)
			self.FileChooserDialog.set_preview_widget(self.PreviewBox)
			self.FileChooserDialog.set_preview_widget_active(False)
			self.PreviewBox.show_all()
			self.FileChooserDialog.connect("update-preview",self._UpdatePreview)
			self.FileChooserDialog.connect("response",self.response_cb)
			self.FileChooserDialog.connect("destroy",self.dialog_destroy)
			self.FileChooserDialog.set_transient_for(self.get_ancestor(Gtk.Window))
		self.FileChooserDialog.present()

	def response_cb(self,dialog,response) :
		self.FileChooserDialog.hide()
		if response==Gtk.ResponseType.ACCEPT :
			self.set_filename(self.FileChooserDialog.get_filename())
			self.emit("file-changed")
		elif response==Gtk.ResponseType.NONE :
			self.set_filename("")
			self.emit("file-changed")

	def dialog_destroy(self,data) :
		self.FileChooserDialog = None

	def get_filename(self):
		return self.Filename

	def set_filename(self,filename=""):
		self.Filename = filename
		if filename[0:len("/home")] == "/home" :
			self.ImageBadPath.show()
		else:
			self.ImageBadPath.hide()
		if filename != "" :
			self.Label.set_label(os.path.basename(filename))
		else :
			self.Label.set_label(_("(None)"))

	def _UpdatePreview(self,e) :
		PreviewURI = self.FileChooserDialog.get_preview_uri()
		PreviewFile = self.FileChooserDialog.get_preview_file()
		if PreviewURI!=None and PreviewFile !=None :
			if not GLib.file_test(PreviewFile.get_path(),GLib.FileTest.IS_DIR) :
				PreviewFileInfo = PreviewFile.query_info("*",Gio.FileQueryInfoFlags.NONE,None)
				mimetype = PreviewFileInfo.get_content_type();
				name = PreviewFile.get_basename()
				mtime = PreviewFileInfo.get_modification_time().tv_sec
				ThumbnailFactory = GnomeDesktop.DesktopThumbnailFactory.new(GnomeDesktop.DesktopThumbnailSize.NORMAL)
				ThumbnailPath = ThumbnailFactory.lookup(PreviewURI,mtime)
				if ThumbnailPath != None :
					pixbuf = GdkPixbuf.Pixbuf.new_from_file(ThumbnailPath)
				else :
					pixbuf = ThumbnailFactory.generate_thumbnail(PreviewURI,mimetype)
					ThumbnailFactory.save_thumbnail(pixbuf,PreviewURI,mtime)
				self.PreviewImage.set_from_pixbuf(pixbuf)
				PreviewWidth = pixbuf.get_option("tEXt::Thumb::Image::Width")
				PreviewHeight = pixbuf.get_option("tEXt::Thumb::Image::Height")
				self.Label_Size.set_label( PreviewWidth + " x " + PreviewHeight)
				self.FileChooserDialog.set_preview_widget_active(True)
				self.LabelInfo.hide()
				self.PreviewImage.show()
				self.Label_Size.show()

			else :
				self.FileChooserDialog.set_preview_widget_active(False)
		else :
			self.FileChooserDialog.set_preview_widget_active(False)

GObject.signal_new("file-changed", ImageChooserButton, GObject.SIGNAL_RUN_FIRST,GObject.TYPE_NONE, ())

class AutologinButton (Gtk.Button) :
	__gtype_name__ = 'AutologinButton'

	def __init__(self):
		Gtk.Button.__init__(self)
		self.autologin=False
		self.username=""
		self.timed=False
		self.time=30
		self.box=Gtk.HBox.new(False,0)
		self.add(self.box)
		self.box.show()
		self.label_state=Gtk.Label(_("Disabled"))
		self.label_state.set_no_show_all(True)
		self.label_state.show()
		self.box.pack_start(self.label_state,True,True,2)
		self.label_user=Gtk.Label("USER")
		self.label_user.set_no_show_all(True)
		self.box.pack_start(self.label_user,False,False,2)
		self.label_time=Gtk.Label("TIME")
		self.label_time.set_no_show_all(True)
		self.box.pack_end(self.label_time,False,False,2)
		self.Separator = Gtk.Separator.new(Gtk.Orientation.VERTICAL)
		self.Separator.set_no_show_all(True)
		self.box.pack_end(self.Separator,False,False,2)
		self.connect("clicked",self._clicked)
		self.Dialog = None 

	def update(self) :
		if self.autologin :
			self.label_state.hide()
			self.label_user.show()
			if self.timed :
				self.Separator.show()
				self.label_time.show()
			else :
				self.Separator.hide()
				self.label_time.hide()
		else :
			self.label_state.show()
			self.label_user.hide()
			self.Separator.hide()
			self.label_time.hide()
		self.label_user.set_text(self.username)
		self.label_time.set_text(str(self.time) + " s")

	def set_autologin(self,b) :
		self.autologin = b
		self.update()

	def get_autologin(self) :
		return self.autologin

	def set_timed(self,timed):
		self.timed=timed
		self.update()

	def get_timed(self):
		return self.timed

	def set_time(self,time):
		self.time=time
		self.update()

	def get_time(self):
		return self.time

	def set_username(self,username):
		self.username=username
		self.update()

	def get_username(self):
		return self.username

	def _clicked(self,e) :
		if self.Dialog == None :
			self.Dialog = AutoLoginDialog()
			self.Dialog.connect("response",self.response_cb)
			self.Dialog.connect("destroy",self.dialog_destroy)
			self.Dialog.set_transient_for(self.get_ancestor(Gtk.Window))
		self.Dialog.CheckButton_AutoLogin.set_active(self.get_autologin())
		self.Dialog.Entry_username.set_text(self.get_username())
		self.Dialog.CheckButton_Delay.set_active(self.get_timed())
		self.Dialog.SpinButton_Delay.set_value(self.get_time())
		self.Dialog.present()

	def response_cb(self,dialog,response) :
		if response == Gtk.ResponseType.OK :
			if self.Dialog.CheckButton_AutoLogin.get_active() and self.Dialog.Entry_username.get_text()=="" :
				MessageDialog = Gtk.MessageDialog(self.get_toplevel(),Gtk.DialogFlags.DESTROY_WITH_PARENT, 
										Gtk.MessageType.ERROR,
										Gtk.ButtonsType.CLOSE,
										_("User Name can't be empty !"));
				MessageDialog.run()
				MessageDialog.destroy()

			else :
				self.set_autologin(self.Dialog.CheckButton_AutoLogin.get_active())
				self.set_username(self.Dialog.Entry_username.get_text())
				self.set_timed(self.Dialog.CheckButton_Delay.get_active())
				self.set_time(self.Dialog.SpinButton_Delay.get_value_as_int())
				self.Dialog.hide()
				self.emit("changed")
		else :
			self.Dialog.hide()

	def dialog_destroy(self,data) :
		self.Dialog = None

GObject.signal_new("changed", AutologinButton, GObject.SIGNAL_RUN_FIRST,GObject.TYPE_NONE, ())

class AutoLoginDialog(Gtk.Dialog):
	def __init__(self):
		Gtk.Dialog.__init__(self)
		self.set_resizable(False)
		self.set_title(_("GDM AutoLogin Setup"))
		self.add_button(Gtk.STOCK_CANCEL,Gtk.ResponseType.CANCEL)
		self.add_button(Gtk.STOCK_OK,Gtk.ResponseType.OK)
		self.content_area = self.get_content_area()
		self.Box = Gtk.Box.new(Gtk.Orientation.VERTICAL,8)
		self.Box.set_border_width(8)
		self.content_area.add(self.Box)

		self.CheckButton_AutoLogin = Gtk.CheckButton(label=_("Enable Automatic Login"),use_underline=True)
		self.CheckButton_AutoLogin.connect("toggled",self.AutoLogin_toggled)
		self.Box.pack_start(self.CheckButton_AutoLogin, False, False, 0)

		self.HBox_username = Gtk.HBox.new(False, 0)
		self.HBox_username.set_sensitive(False)
		self.Box.pack_start(self.HBox_username, False, False, 0)

		self.Label_username = Gtk.Label(_("User Name"))
		self.Label_username.set_alignment(0,0.5)
		self.HBox_username.pack_start(self.Label_username, False, False, 0)

		self.Entry_username =  Gtk.Entry()
		self.HBox_username.pack_end(self.Entry_username, False, False, 0)

		self.HBox_Delay = Gtk.HBox.new(False, 8)
		self.HBox_Delay.set_sensitive(False)
		self.Box.pack_start(self.HBox_Delay, False, False, 0)

		self.CheckButton_Delay = Gtk.CheckButton(label=_("Enable Delay before autologin"),use_underline=True)
		self.CheckButton_Delay.connect("toggled",self.Delay_toggled)
		self.HBox_Delay.pack_start(self.CheckButton_Delay, False, False, 0)

		self.SpinButton_Delay = Gtk.SpinButton.new_with_range(1,60,1)
		self.SpinButton_Delay.set_value(10)
		self.SpinButton_Delay.set_sensitive(False)
		self.HBox_Delay.pack_end(self.SpinButton_Delay, False, False, 0)

		self.show_all()

	def AutoLogin_toggled(self,e):
		if self.CheckButton_AutoLogin.get_active():
			self.HBox_username.set_sensitive(True)
			self.HBox_Delay.set_sensitive(True)
		else:
			self.HBox_username.set_sensitive(False)
			self.HBox_Delay.set_sensitive(False)

	def Delay_toggled(self,e):
		if self.CheckButton_Delay.get_active():
			self.SpinButton_Delay.set_sensitive(True)
		else:
			self.SpinButton_Delay.set_sensitive(False)


class BannerButton(Gtk.Button) :
	__gtype_name__ = 'BannerButton'

	def __init__(self):
		Gtk.Button.__init__(self)
		self.set_label(_("Disabled"))
		self.connect("clicked",self._clicked)
		self._Text=""
		self._State=False

	def get_text(self):
		return self._Text

	def set_text(self,text):
		self._Text = text
		if self._State == True :
			self.set_label(text)

	def get_state(self):
		return self._State

	def set_state(self,state):
		self._State = state
		if state == True :
			self.set_label(self._Text)
		else :
			self.set_label(_("Disabled"))

	def _clicked(self,e) :
		self._Dialog = Gtk.Dialog()
		self._Dialog.set_modal(True)
		self._Dialog.set_resizable(False)
		self._Dialog.set_title(_("Banner"))
		self._Dialog.add_button(Gtk.STOCK_CANCEL,Gtk.ResponseType.CANCEL)
		self._Dialog.add_button(Gtk.STOCK_OK,Gtk.ResponseType.OK)
		self._Content_area = self._Dialog.get_content_area()
		self._Box_Main = Gtk.VBox.new(False,12)
		self._Box_Main.set_border_width(24)
		self._Content_area.add(self._Box_Main)
		self._Box_State = Gtk.HBox.new(False,12)
		self._Box_Main.pack_start(self._Box_State,False,False,2)
		self._Label_State = Gtk.Label(_("Enable Banner"))
		self._Label_State.set_alignment(0,0.5)
		self._Box_State.pack_start(self._Label_State,False,False,2)
		self._Switch_State = Gtk.Switch()
		self._Box_State.pack_end(self._Switch_State,False,False,2)
		self._Box_Text = Gtk.HBox.new(False,12)
		self._Box_Main.pack_start(self._Box_Text,False,False,2)
		self._Entry_Text = Gtk.Entry()
		self._Box_Text.pack_end(self._Entry_Text,True,False,2)
		self._Content_area.show_all()

		if self._State == True :
			self._Switch_State.set_active(True)
		else :
			self._Box_Text.set_sensitive(False)
		self._Entry_Text.set_text(self._Text)

		self._Switch_State.connect("notify::active",self._sw_toggled)

		result = self._Dialog.run()

		if result == Gtk.ResponseType.OK :
			self.set_text(self._Entry_Text.get_text())
			self.set_state(self._Switch_State.get_active())
			self._Dialog.destroy()
			self.emit("changed")
		else :
			self._Dialog.destroy()

	def _sw_toggled(self,e,s) :
		state = self._Switch_State.get_active()

		if state == True :
			self._Box_Text.set_sensitive(True)
		else :
			self._Box_Text.set_sensitive(False)

GObject.signal_new("changed", BannerButton, GObject.SIGNAL_RUN_FIRST,GObject.TYPE_NONE, ())


class AuthenticationButton(Gtk.Button) :
	__gtype_name__ = 'AuthenticationButton'

	def __init__(self):
		Gtk.Button.__init__(self)
		self.connect("clicked",self._clicked)
		self._Fingerprint=False
		self._Password=False
		self._Smartcard=False

	def get_fingerprint(self):
		return self._Fingerprint

	def get_password(self):
		return self._Password

	def get_smartcard(self):
		return self._Smartcard

	def set_methods(self,fingerprint,password,smartcard):
		self._Fingerprint = fingerprint
		self._Password = password
		self._Smartcard = smartcard
		self._UpdateText()

	def _UpdateText(self):
		m = 1 * self._Fingerprint + 2 * self._Password + 4 * self._Smartcard  
		if   m == 0 :
			self.set_label( _("None") )
		elif m == 1 :
			self.set_label( _("Fingerprint") )
		elif m == 2 :
			self.set_label( _("Password") )
		elif m == 3 :
			self.set_label( _("Fingerprint") + " | " + _("Password") )
		elif m == 4 :
			self.set_label( _("Smartcard") )
		elif m == 5 :
			self.set_label( _("Fingerprint") + " | " + _("Smartcard") )
		elif m == 6 :
			self.set_label( _("Password") + " | " + _("Smartcard") )
		else :
			self.set_label( _("All") )

	def _UpdateInfo(self):
		mode = 1 * self._Switch_Fingerprint.get_active() + 2 * self._Switch_Password.get_active() + 4 * self._Switch_Smartcard.get_active()
		area = self._Dialog.get_action_area()

		if mode == 0 :
			child = area.get_children()[0]
			child.set_sensitive(False)
			self._Box_InfoBar_none.show()
		else :
			child = area.get_children()[0]
			child.set_sensitive(True)
			self._Box_InfoBar_none.hide()

		if not mode & 2 and mode > 0 :
			self._Box_InfoBar_password.show_all()
		else :
			self._Box_InfoBar_password.hide()

	def _clicked(self,e) :
		self._Dialog = Gtk.Dialog()
		self._Dialog.set_modal(True)
		self._Dialog.set_resizable(False)
		self._Dialog.set_title(_("Authentication"))
		self._Dialog.add_button(Gtk.STOCK_CANCEL,Gtk.ResponseType.CANCEL)
		self._Dialog.add_button(Gtk.STOCK_OK,Gtk.ResponseType.OK)
		self._Content_area = self._Dialog.get_content_area()
		self._Box_Main = Gtk.VBox.new(False,12)
		self._Box_Main.set_border_width(24)
		self._Content_area.add(self._Box_Main)
		self._Box_InfoBar_password = Gtk.HBox.new(False,12)
		self._Box_Main.pack_start(self._Box_InfoBar_password,False,False,2)
		self._InfoBar_password = Gtk.InfoBar()
		self._Box_InfoBar_password.pack_start(self._InfoBar_password,False,False,2)
		self._InfoBar_password.set_message_type(Gtk.MessageType.WARNING)
		self._InfoBar_password.set_show_close_button (False)
		self._InfoBar_password_Label = Gtk.Label(_("Disabling Password Authentication is discouraged"))
		self._InfoBar_password.get_content_area().pack_start(self._InfoBar_password_Label,False, False,0)
		self._InfoBar_password_Label.show()
		self._Box_InfoBar_none = Gtk.HBox.new(False,12)
		self._Box_Main.pack_start(self._Box_InfoBar_none,False,False,2)
		self._InfoBar_none = Gtk.InfoBar()
		self._Box_InfoBar_none.pack_start(self._InfoBar_none,False,False,2)
		self._InfoBar_none.set_message_type(Gtk.MessageType.ERROR)
		self._InfoBar_none.set_show_close_button (False)
		self._InfoBar_none_Label = Gtk.Label(_("You must enable at least one method"))
		self._InfoBar_none.get_content_area().pack_start(self._InfoBar_none_Label,False, False,0)
		self._InfoBar_none_Label.show()
		self._Box_Fingerprint = Gtk.HBox.new(False,12)
		self._Box_Main.pack_start(self._Box_Fingerprint,False,False,2)
		self._Label_Fingerprint = Gtk.Label(_("Fingerprint"))
		self._Label_Fingerprint.set_alignment(0,0.5)
		self._Box_Fingerprint.pack_start(self._Label_Fingerprint,False,False,2)
		self._Switch_Fingerprint = Gtk.Switch()
		self._Box_Fingerprint.pack_end(self._Switch_Fingerprint,False,False,2)
		self._Box_Password = Gtk.HBox.new(False,12)
		self._Box_Main.pack_start(self._Box_Password,False,False,2)
		self._Label_Password = Gtk.Label(_("Password"))
		self._Label_Password.set_alignment(0,0.5)
		self._Box_Password.pack_start(self._Label_Password,False,False,2)
		self._Switch_Password = Gtk.Switch()
		self._Box_Password.pack_end(self._Switch_Password,False,False,2)
		self._Box_Smartcard = Gtk.HBox.new(False,12)
		self._Box_Main.pack_start(self._Box_Smartcard,False,False,2)
		self._Label_Smartcard = Gtk.Label(_("Smartcard"))
		self._Label_Smartcard.set_alignment(0,0.5)
		self._Box_Smartcard.pack_start(self._Label_Smartcard,False,False,2)
		self._Switch_Smartcard = Gtk.Switch()
		self._Box_Smartcard.pack_end(self._Switch_Smartcard,False,False,2)
		self._Content_area.show_all()
		self._Switch_Fingerprint.set_active(self._Fingerprint)
		self._Switch_Password.set_active(self._Password)
		self._Switch_Smartcard.set_active(self._Smartcard)
		self._Switch_Fingerprint.connect("notify::active",self._sw_toggled)
		self._Switch_Password.connect("notify::active",self._sw_toggled)
		self._Switch_Smartcard.connect("notify::active",self._sw_toggled)
		self._UpdateInfo()

		result = self._Dialog.run()

		if result == Gtk.ResponseType.OK :
			self.set_methods(self._Switch_Fingerprint.get_active(),self._Switch_Password.get_active(),self._Switch_Smartcard.get_active())
			self._Dialog.destroy()
			self.emit("changed")
		else :
			self._Dialog.destroy()

	def _sw_toggled(self,e,s):
		self._UpdateInfo()

GObject.signal_new("changed", AuthenticationButton, GObject.SIGNAL_RUN_FIRST,GObject.TYPE_NONE, ())


class MainWindow(Gtk.ApplicationWindow) :
	def __init__(self,app) :
		Gtk.ApplicationWindow.__init__(self,application=app,title=_("GDM3 Setup"))
		self.connect("destroy",self._close)
		self.set_border_width(20)
		self.set_position(Gtk.WindowPosition.CENTER)
		self.set_resizable(False)
		self.set_size_request(640,480)

		self.titlebar = Gtk.HeaderBar()
		self.titlebar.set_title(_("GDM3 Setup"))
		self.titlebar.set_show_close_button(True)
		self.set_titlebar(self.titlebar)

		self.Builder = Gtk.Builder()
		self.Builder.set_translation_domain("gdm3setup")
		self.Builder.add_from_file("/usr/share/gdm3setup/ui/gdm3setup.ui")
		self.Box_Main = self.Builder.get_object("box_main")
		self.add(self.Box_Main)

		self.ComboBox_shell10 = self.Builder.get_object("ComboBox_shell10")
		self.ComboBox_icon = self.Builder.get_object("ComboBox_icon")
		self.ComboBox_cursor = self.Builder.get_object("ComboBox_cursor")
		self.Button_shell_logo10 = self.Builder.get_object("Button_shell_logo10")
		self.Button_banner_text6 = self.Builder.get_object("Button_banner_text6")
		self.Switch_user8 = self.Builder.get_object("Switch_user8")
		self.Button_autologin = self.Builder.get_object("Button_autologin")
		self.Switch_clock_date10 = self.Builder.get_object("Switch_clock_date10")
		self.Switch_clock_seconds10 = self.Builder.get_object("Switch_clock_seconds10")
		self.SpinButton_allowed_failures10 = self.Builder.get_object("SpinButton_allowed_failures10")
		self.Button_authentication = self.Builder.get_object("Button_authentication")

		self.SpinButton_allowed_failures10.set_range(1,9)
		self.SpinButton_allowed_failures10.set_increments(1,1)
		self.SpinButton_allowed_failures10.set_numeric(True)
		self.SpinButton_allowed_failures10.set_wrap(True)

		self.load_shell_list()
		self.load_icon_list()
		self.get_gdm()
		self.get_autologin()

		self.ComboBox_shell10.connect("changed",self.shell_theme_10_changed)
		self.ComboBox_icon.connect("changed",self.icon_theme_changed)
		self.ComboBox_cursor.connect("changed",self.cursor_theme_changed)
		self.Button_shell_logo10.connect("file-changed",self.shell_logo_10_filechanged)
		self.Button_banner_text6.connect("changed",self.banner_text_6_changed)
		self.Switch_user8.connect("notify::active",self.user_list_8_toggled)
		self.Button_autologin.connect("changed",self.autologin_changed)
		self.Switch_clock_date10.connect("notify::active",self.clock_date_10_toggled)
		self.Switch_clock_seconds10.connect("notify::active",self.clock_seconds_10_toggled)
		self.SpinButton_allowed_failures10.connect("value-changed",self.allowed_failures_10_changed)
		self.Button_authentication.connect("changed",self.authentication_changed)

	def load_shell_list(self):

		lst_shell_themes = os.listdir('/usr/share/themes')
		self.ComboBox_shell10.append_text("Adwaita")

		for i in range(len(lst_shell_themes)):
			if os.path.isdir('/usr/share/themes/'+lst_shell_themes[i]+'/gnome-shell') :
				self.ComboBox_shell10.append_text(lst_shell_themes[i])

	def load_icon_list(self):
		lst_icons = os.listdir('/usr/share/icons')

		for i in range(len(lst_icons)):
			if os.path.isdir('/usr/share/icons/'+lst_icons[i]+'/') :
				if 	os.path.isdir('/usr/share/icons/'+lst_icons[i]+'/cursors/') :
					self.ComboBox_cursor.append_text(lst_icons[i])
				else :
					self.ComboBox_icon.append_text(lst_icons[i])

	def _close(self,e):
		try :
			GdmSetupClient.StopDaemon()
		except dbus.exceptions.DBusException :
			pass

	def get_gdm(self):
		self.SHELL_THEME = GdmSetupClient.GetShellTheme()
		self.ICON_THEME = GdmSetupClient.GetIconTheme()
		self.CURSOR_THEME = GdmSetupClient.GetCursorTheme()
		self.SHELL_LOGO = GdmSetupClient.GetShellLogo()
		self.USER_LIST = GdmSetupClient.GetUserListVisibility() 
		self.BANNER = GdmSetupClient.GetBannerVisibility() 
		self.BANNER_TEXT = GdmSetupClient.GetBannerText()
		self.CLOCK_DATE = GdmSetupClient.GetClockDateVisibility() 
		self.CLOCK_SECONDS = GdmSetupClient.GetClockSecondsVisibility() 
		self.ALLOWED_FAILURES = GdmSetupClient.GetAllowedFailures()
		self.FINGERPRINT_AUTHENTICATION = GdmSetupClient.GetFingerprintAuthentication()
		self.PASSWORD_AUTHENTICATION = GdmSetupClient.GetPasswordAuthentication()
		self.SMARTCARD_AUTHENTICATION = GdmSetupClient.GetSmartcardAuthentication()
		self.ComboBox_shell10.set_active_iter(get_iter(self.ComboBox_shell10.get_model(),quote(self.SHELL_THEME)))
		self.ComboBox_icon.set_active_iter(get_iter(self.ComboBox_icon.get_model(),quote(self.ICON_THEME)))
		self.ComboBox_cursor.set_active_iter(get_iter(self.ComboBox_cursor.get_model(),quote(self.CURSOR_THEME)))
		self.Button_shell_logo10.set_filename(self.SHELL_LOGO)
		self.Button_banner_text6.set_text(self.BANNER_TEXT)
		self.Button_banner_text6.set_state(self.BANNER)
		self.Switch_user8.set_active(self.USER_LIST)
		self.Switch_clock_date10.set_active(self.CLOCK_DATE)
		self.Switch_clock_seconds10.set_active(self.CLOCK_SECONDS)
		self.SpinButton_allowed_failures10.set_value(self.ALLOWED_FAILURES)
		self.Button_authentication.set_methods(self.FINGERPRINT_AUTHENTICATION,self.PASSWORD_AUTHENTICATION,self.SMARTCARD_AUTHENTICATION)

	def set_autologin(self,autologin,username,timed,time):
		if self.SetAutoLogin(autologin,username,timed,time)=="OK" :
			return True
		else :
			return False

	def get_autologin(self):
		self.AUTOLOGIN_ENABLED = GdmSetupClient.GetAutoLoginState()
		self.AUTOLOGIN_USERNAME = GdmSetupClient.GetAutoLoginUserName()
		self.AUTOLOGIN_TIMED = GdmSetupClient.GetAutoLoginTimed()
		self.AUTOLOGIN_TIME = GdmSetupClient.GetAutoLoginTime()
		self.Button_autologin.set_autologin(self.AUTOLOGIN_ENABLED) 
		self.Button_autologin.set_username(self.AUTOLOGIN_USERNAME)
		self.Button_autologin.set_timed(self.AUTOLOGIN_TIMED) 
		self.Button_autologin.set_time(self.AUTOLOGIN_TIME)

	def shell_theme_10_changed(self,e):
		shell_theme = unicode(self.ComboBox_shell10.get_active_text(),'UTF_8')
		if shell_theme!=self.SHELL_THEME :
			if GdmSetupClient.SetShellTheme(shell_theme) :
				self.SHELL_THEME = shell_theme
				print("SHELL Theme Changed : " + self.SHELL_THEME)
			else :
				self.ComboBox_shell10.set_active_iter(get_iter(self.ComboBox_shell10.get_model(),quote(self.SHELL_THEME)))

	def icon_theme_changed(self,e):
		icon_theme = unicode(self.ComboBox_icon.get_active_text(),'UTF_8')
		if self.ICON_THEME != icon_theme:
			if GdmSetupClient.SetIconTheme(icon_theme) :
				self.ICON_THEME = icon_theme
				print ("Icon Theme Changed : " + self.ICON_THEME)
			else :
				self.ComboBox_icon.set_active_iter(get_iter(self.ComboBox_icon.get_model(),quote(self.ICON_THEME)))

	def cursor_theme_changed(self,e):
		cursor_theme = unicode(self.ComboBox_cursor.get_active_text(),'UTF_8')
		if self.CURSOR_THEME != cursor_theme:
			if GdmSetupClient.SetCursorTheme(cursor_theme) :
				self.CURSOR_THEME = cursor_theme
				print ("Cursor Theme Changed : " + self.CURSOR_THEME)
			else :
				self.ComboBox_cursor.set_active_iter(get_iter(self.ComboBox_cursor.get_model(),quote(self.CURSOR_THEME)))

	def shell_logo_10_filechanged(self,e):
		shell_logo = unicode(self.Button_shell_logo10.get_filename(),'UTF_8')
		if self.SHELL_LOGO != shell_logo :
			if GdmSetupClient.SetShellLogo(shell_logo) :
				self.SHELL_LOGO = shell_logo
				print ("Shell Logo Changed : " + self.SHELL_LOGO)
			else:
				self.Button_shell_logo10.set_filename(self.SHELL_LOGO)

	def banner_text_6_changed(self,e):
		banner_text = unicode(self.Button_banner_text6.get_text(),'UTF_8')
		banner = self.Button_banner_text6.get_state()
		if banner_text!=self.BANNER_TEXT or banner!=self.BANNER :
			if GdmSetupClient.SetBannerText(banner_text) :
				GdmSetupClient.SetBannerVisibility(banner)
				self.BANNER_TEXT = banner_text
				self.BANNER = banner
				print ("Banner Changed - Text : " + self.BANNER_TEXT) + " - State : " + str(self.BANNER)
			else :
				self.Button_banner_text6.set_text(self.BANNER_TEXT)
				self.Button_banner_text6.set_state(self.BANNER)

	def authentication_changed(self,e):
		fingerprint_authentication = self.Button_authentication.get_fingerprint()
		password_authentication = self.Button_authentication.get_password()
		smartcard_authentication = self.Button_authentication.get_smartcard()
		if fingerprint_authentication!=self.FINGERPRINT_AUTHENTICATION or password_authentication!=self.PASSWORD_AUTHENTICATION or smartcard_authentication!=self.SMARTCARD_AUTHENTICATION :
			if GdmSetupClient.SetFingerprintAuthentication(fingerprint_authentication) :
				GdmSetupClient.SetPasswordAuthentication(password_authentication)
				GdmSetupClient.SetSmartcardAuthentication(smartcard_authentication)
				self.FINGERPRINT_AUTHENTICATION=fingerprint_authentication
				self.PASSWORD_AUTHENTICATION=password_authentication
				self.SMARTCARD_AUTHENTICATION=smartcard_authentication
				print ("Authentication methods Changed")
			else :
				self.Button_authentication.set_methods(fingerprint_authentication,password_authentication,smartcard_authentication)

	def user_list_8_toggled(self,e,state):
		user_list = self.Switch_user8.get_active()
		if self.USER_LIST != user_list :
			if GdmSetupClient.SetUserListVisibility(user_list) :
				self.USER_LIST = user_list
				print ("User List Changed : " + str(self.USER_LIST))
			else:
				self.Switch_user8.set_active(self.USER_LIST)

	def autologin_changed(self,e) :
		autologin_enabled = self.Button_autologin.get_autologin()
		autologin_username = self.Button_autologin.get_username()
		autologin_timed = self.Button_autologin.get_timed()
		autologin_time = self.Button_autologin.get_time()
		if GdmSetupClient.SetAutoLoginTime(autologin_time):
			GdmSetupClient.SetAutoLoginTimed(autologin_timed)
			GdmSetupClient.SetAutoLoginUserName(autologin_username)
			GdmSetupClient.SetAutoLoginState(autologin_enabled)
			print("Autologin Changed : " + autologin_username)
			self.AUTOLOGIN_ENABLED = autologin_enabled
			self.AUTOLOGIN_USERNAME = autologin_username
			self.AUTOLOGIN_TIMED = autologin_timed
			self.AUTOLOGIN_TIME = autologin_time
		else :
			self.Button_autologin.set_autologin(self.AUTOLOGIN_ENABLED)
			self.Button_autologin.set_username(self.AUTOLOGIN_USERNAME)
			self.Button_autologin.set_timed(self.AUTOLOGIN_TIMED)
			self.Button_autologin.set_time(self.AUTOLOGIN_TIME)

	def clock_date_10_toggled(self,e,state) :
		clock_date = self.Switch_clock_date10.get_active()
		if self.CLOCK_DATE != clock_date :
			if GdmSetupClient.SetClockDateVisibility(clock_date) :
				self.CLOCK_DATE = clock_date
				print ("Clock Date toggled : " + str(self.CLOCK_DATE))
			else:
				self.Switch_clock_date10.set_active(self.CLOCK_DATE)

	def clock_seconds_10_toggled(self,e,state) :
		clock_seconds = self.Switch_clock_seconds10.get_active()
		if self.CLOCK_SECONDS != clock_seconds :
			if GdmSetupClient.SetClockSecondsVisibility(clock_seconds) :
				self.CLOCK_SECONDS = clock_seconds
				print ("Clock Seconds toggled : " + str(self.CLOCK_SECONDS))
			else:
				self.Switch_clock_seconds10.set_active(self.CLOCK_SECONDS)
		
	def allowed_failures_10_changed(self,e) :
		allowed_failures = self.SpinButton_allowed_failures10.get_value()
		if self.ALLOWED_FAILURES != allowed_failures :
			if GdmSetupClient.SetAllowedFailures(allowed_failures) :
				self.ALLOWED_FAILURES = allowed_failures
				print ("Allowed Failures Changed : " + str(self.ALLOWED_FAILURES))
			else:
				self.SpinButton_allowed_failures10.set_value(self.ALLOWED_FAILURES)

#-----------------------------------------------

def get_setting(name,data):
	for line in data:
		line = unicode(line)
		if line[0:len(name)+1]==name+"=":
			value = line[len(name)+1:len(line)].strip()
			break
	return value

def unquote(value):
	if value[0:1] == "'"  and value[len(value)-1:len(value)] == "'" :
		value = value[1:len(value)-1]
	return value

def quote(value):
	value = "'"+value+"'"
	return value

def str_to_bool(state) :
	if state.capitalize()=="True" :
		b_state = True
	else :
		b_state = False

	return b_state

def get_iter(model,target):
	target_iter = None
	iter_test = model.get_iter_first()
	while iter_test!=None:
		name = model.get_value(iter_test,0)
		if "'"+name+"'" == target:
			target_iter = iter_test
			break 
		iter_test = model.iter_next(iter_test)
	return target_iter

def GetPixbufForPath(targetfile) :
	PreviewFile = Gio.File.new_for_path(targetfile)
	if PreviewFile.query_exists(None) :
		PreviewFileInfo = PreviewFile.query_info("*",Gio.FileQueryInfoFlags.NONE,None)
		mtime = PreviewFileInfo.get_modification_time().tv_sec;
		mimetype = PreviewFileInfo.get_content_type();
		ThumbnailFactory = GnomeDesktop.DesktopThumbnailFactory.new(GnomeDesktop.DesktopThumbnailSize.LARGE);
		ThumbnailPath = ThumbnailFactory.lookup(PreviewFile.get_uri(),mtime);
		if (ThumbnailPath != None) :
			pixbuf = GdkPixbuf.Pixbuf.new_from_file(ThumbnailPath)
		else :
			pixbuf = ThumbnailFactory.generate_thumbnail(PreviewFile.get_uri(),mimetype)
			ThumbnailFactory.save_thumbnail(pixbuf,PreviewFile.get_uri(),mtime)
	else :
		ThumbnailFactory = GnomeDesktop.DesktopThumbnailFactory.new(GnomeDesktop.DesktopThumbnailSize.LARGE);
		pixbuf = ThumbnailFactory.generate_thumbnail(PreviewFile.get_uri(),"")
	return pixbuf

class Application(Gtk.Application):
	def __init__(self):
		Gtk.Application.__init__(self,application_id='nanoarch.gdm3setup')
		GLib.set_application_name("GDM3setup")
		GLib.set_prgname('gdm3setup')


		self._window = None
	def do_activate(self):
		if not self._window:
			self._window = MainWindow(self)
			self._window.show_all()
		self._window.present()

	def do_startup(self):
		Gtk.Application.do_startup(self)
		self.build_app_menu()
		self.set_app_menu(self.app_menu)

	def build_app_menu(self):
		builder = Gtk.Builder ();
		builder.set_translation_domain('gdm3setup')
		builder.add_from_file ("/usr/share/gdm3setup/ui/app-menu.ui");
		self.app_menu = builder.get_object("app-menu")

		aboutAction = Gio.SimpleAction.new('about', None)
		aboutAction.connect('activate', self.about)
		self.add_action(aboutAction)

		quitAction = Gio.SimpleAction.new('quit', None)
		quitAction.connect('activate', self.quit)
		self.add_action(quitAction)

	def quit(self,action=None, param=None):
		self._window.destroy()

	def about(self,action=None, param=None):
		aboutdialog = Gtk.AboutDialog()
		aboutdialog.set_title(_("About GDM3setup"))
		aboutdialog.set_program_name("GDM3setup")
		aboutdialog.set_comments(_("An interface to configure GDM3"))
		aboutdialog.set_copyright("Copyright \xc2\xa9 2011-2013 NanoArch")
		aboutdialog.set_logo_icon_name("preferences-desktop-theme")
		aboutdialog.set_website("https://github.com/Nano77/gdm3setup/")

		AUTHORS = [
				"NanoArch <nanoarch77@gmail.com>"
				]
		aboutdialog.set_authors(AUTHORS)
		aboutdialog.set_translator_credits(_("translator-credits"))
		aboutdialog.connect("response", lambda w, r: aboutdialog.destroy())
		aboutdialog.show()

if __name__ == "__main__":
	gettext.install("gdm3setup")
	app = Application()
	exit_status = app.run(None)
	sys.exit(exit_status)

